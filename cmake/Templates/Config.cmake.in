# - Config file for the @PROJECT_NAME@ package
# It defines the following variables
#  @PROJECT_NAME@_INCLUDE_DIRS - include directories for @PROJECT_NAME@
#  @PROJECT_NAME@_LIBRARY_DIRS - library directories for @PROJECT_NAME@ (normally not used!)
#  @PROJECT_NAME@_LIBRARIES    - libraries to link against

# Tell the user project where to find our headers and libraries
get_filename_component(@PROJECT_NAME@_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
if(NOT @PROJECT_NAME@_BINARY_DIR)
    set(@CPROJECT_NAME@_INCLUDE_DIRS "@CMAKE_INSTALL_FULL_INCLUDEDIR@@PROJECT_INCLUDE_EXTRA@")
    set(@CPROJECT_NAME@_LIBRARY_DIRS "@CMAKE_INSTALL_FULL_LIBDIR@")
else()
    set(@CPROJECT_NAME@_INCLUDE_DIRS "@PROJECT_SOURCE_DIR@/source"
        "@PROJECT_SOURCE_DIR@/timemory/source")
endif()

# These are IMPORTED targets created by @PROJECT_NAME@LibraryDepends.cmake
set(@CPROJECT_NAME@_SHARED_LIBRARIES @PROJECT_SHARED_LIBRARY@)
set(@CPROJECT_NAME@_STATIC_LIBRARIES @PROJECT_STATIC_LIBRARY@)

# Our library dependencies (contains definitions for IMPORTED targets)
if(NOT @PROJECT_NAME@_BINARY_DIR)
  include("${@PROJECT_NAME@_CMAKE_DIR}/@CPROJECT_NAME@LibraryDepends.cmake")
  list(APPEND CMAKE_MODULE_PATH ${@PROJECT_NAME@_CMAKE_DIR})
endif()

# Load information for each installed configuration.
file(GLOB _HEADER_CONFIG_FILES
    "${@PROJECT_NAME@_CMAKE_DIR}/@CPROJECT_NAME@ConfigHeader-*.cmake")
foreach(f ${_HEADER_CONFIG_FILES})
  include(${f})
endforeach()

file(GLOB _VERSION_CONFIG_FILE
    "${@PROJECT_NAME@_CMAKE_DIR}/@CPROJECT_NAME@ConfigVersion.cmake")
if(NOT "${_VERSION_CONFIG_FILE}" STREQUAL "")
  include(${_VERSION_CONFIG_FILE})
endif()

set(_BUILD_TYPE ${CMAKE_BUILD_TYPE})
if(NOT _BUILD_TYPE)
  set(_BUILD_TYPE None)
endif()
# include the config header directory for this build
if(@CPROJECT_NAME@_INCLUDE_DIRS_${_BUILD_TYPE})
    list(APPEND @CPROJECT_NAME@_INCLUDE_DIRS ${@CPROJECT_NAME@_INCLUDE_DIRS_${_BUILD_TYPE}})
else() # if a config header directory does not exist for this build type
    # include the config header directory for any existing build
    foreach(_type Release RelWithDebInfo MinSizeRel Debug)
        if(@CPROJECT_NAME@_INCLUDE_DIRS_${_type})
            list(APPEND @CPROJECT_NAME@_INCLUDE_DIRS ${@CPROJECT_NAME@_INCLUDE_DIRS_${_type}})
            break()
        endif()
    endforeach()
endif()

set(@CPROJECT_NAME@_CXX_FLAGS_DEBUG          "@CMAKE_CXX_FLAGS_DEBUG@")
set(@CPROJECT_NAME@_CXX_FLAGS_MINSIZEREL     "@CMAKE_CXX_FLAGS_MINSIZEREL@")
set(@CPROJECT_NAME@_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@")
set(@CPROJECT_NAME@_CXX_FLAGS_RELEASE        "@CMAKE_CXX_FLAGS_RELEASE@")
set(@CPROJECT_NAME@_CXX_FLAGS_EXTRA          "@CMAKE_CXX_FLAGS_EXTRA@")

set(@CPROJECT_NAME@_LIBRARIES )
if(@CPROJECT_NAME@_SHARED_LIBRARIES)
    set(@CPROJECT_NAME@_LIBRARIES ${@CPROJECT_NAME@_SHARED_LIBRARIES})
elseif(@CPROJECT_NAME@_STATIC_LIBRARIES)
    set(@CPROJECT_NAME@_LIBRARIES ${@CPROJECT_NAME@_STATIC_LIBRARIES})
endif()

unset(_HEADER_CONFIG_FILES)
unset(_VERSION_CONFIG_FILE)
unset(_BUILD_TYPE)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(@CPROJECT_NAME@
    REQUIRED_VARS
    @CPROJECT_NAME@_LIBRARIES
    @CPROJECT_NAME@_INCLUDE_DIRS
    VERSION_VAR
    @CPROJECT_NAME@_VERSION)

macro(ADD_@CPROJECT_NAME@_CXX_FLAGS)
    if(NOT "${@CPROJECT_NAME@_CXX_FLAGS_EXTRA}" STREQUAL "")
        foreach(_TYPE DEBUG RELEASE MINSIZEREL RELWITHDEBINFO)
            set(CMAKE_CXX_FLAGS_${_TYPE}
                "${CMAKE_CXX_FLAGS_${_TYPE}} ${@CPROJECT_NAME@_CXX_FLAGS_${_TYPE}} ${@CPROJECT_NAME@_CXX_FLAGS_EXTRA}")
        endforeach()
    endif(NOT "${@CPROJECT_NAME@_CXX_FLAGS_EXTRA}" STREQUAL "")
endmacro()

set(@CPROJECT_NAME@_CMAKE_CONFIG_FILE ON)

# if we are in the build tree, call above macro
if(@PROJECT_NAME@_BINARY_DIR)
    ADD_@CPROJECT_NAME@_CXX_FLAGS()
endif(@PROJECT_NAME@_BINARY_DIR)

