# MIT License
#
# Copyright (c) 2017 Jonathan R. Madsen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#

from __future__ import absolute_import

import os
import sys
import imp
import ctypes
from ctypes.util import find_library

# if compiled with shared library linking
if "@SHARED_PYTHON_LINKING@" == "ON":

    _verbose = 0
    try:
        _verbose = int(os.environ['MAD_VERBOSE'])
    except Exception as e:
        _verbose = 0

    # search for library using {DYLD,LD}_LIBRARY_PATH, LD_RUN_PATH, etc.
    mad_lib_path = find_library("madthreading")

    # if not found, go to hard-coded path from installation
    if mad_lib_path is None:
        if _verbose > 2:
            print('find_library("madthreading") returned None. Falling back to installation path')
        mad_lib_path = "@CMAKE_INSTALL_FULL_LIBDIR@/libmadthreading@CMAKE_SHARED_LIBRARY_SUFFIX@"

    if _verbose > 0:
        print('Using madthreading shared library: {}'.format(mad_lib_path))

    # open the shared library for RPATH resolution
    lib = ctypes.CDLL(mad_lib_path, mode=ctypes.RTLD_GLOBAL)

